// <auto-generated />
using System;
using MarbleFoods.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarbleFoods.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250124124222_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsAlert", b =>
                {
                    b.Property<Guid>("AlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AlertType")
                        .HasColumnType("int");

                    b.Property<Guid?>("AssignedToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RelatedEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RelatedEntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Severity")
                        .HasColumnType("int");

                    b.HasKey("AlertId");

                    b.ToTable("MarbleFoodsAlert");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsAuditLog", b =>
                {
                    b.Property<Guid>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NewValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AuditLogId");

                    b.HasIndex("EntityName");

                    b.HasIndex("Timestamp");

                    b.ToTable("MarbleFoodsAuditLog");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsCommodity", b =>
                {
                    b.Property<Guid>("CommodityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPerishable")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaximumStockLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumStockLevel")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("RequiresQualityCheck")
                        .HasColumnType("bit");

                    b.Property<int>("ShelfLifeDays")
                        .HasColumnType("int");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CommodityId");

                    b.ToTable("MarbleFoodsCommodity");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsInventoryBatch", b =>
                {
                    b.Property<Guid>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CommodityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ManufactureDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StorageLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BatchId");

                    b.HasIndex("CommodityId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("MarbleFoodsInventoryBatch");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsInventoryTransaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DestinationWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SourceWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("BatchId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DestinationWarehouseId");

                    b.HasIndex("SourceWarehouseId");

                    b.ToTable("MarbleFoodsInventoryTransaction");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsPurchaseOrder", b =>
                {
                    b.Property<Guid>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PurchaseStatus")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("PurchaseOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("MarbleFoodsPurchaseOrder");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsPurchaseOrderItem", b =>
                {
                    b.Property<Guid>("PurchaseOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommodityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PurchaseOrderItemId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("MarbleFoodsPurchaseOrderItem");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsQualityCheck", b =>
                {
                    b.Property<Guid>("QualityCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PerformedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QualityStatus")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("QualityCheckId");

                    b.HasIndex("BatchId");

                    b.HasIndex("PerformedByUserId");

                    b.ToTable("MarbleFoodsQualityCheck");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsQualityCheckResult", b =>
                {
                    b.Property<Guid>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PassedCheck")
                        .HasColumnType("bit");

                    b.Property<Guid>("QualityCheckId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ResultId");

                    b.HasIndex("QualityCheckId");

                    b.ToTable("MarbleFoodsQualityCheckResult");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsQualityParameter", b =>
                {
                    b.Property<Guid>("ParameterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaximumValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinimumValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParameterId");

                    b.ToTable("MarbleFoodsQualityParameter");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsRoles", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("MarbleFoodsRoles");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsSupplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SupplierId");

                    b.ToTable("MarbleFoodsSupplier");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresMFA")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserRole")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("MarbleFoodsUser");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsUserMfaBackupCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<Guid>("MarbleFoodsUserUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsedFromIpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MarbleFoodsUserUserId");

                    b.ToTable("MarbleFoodsUserMfaBackupCode");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsUserMfaTrustedDeviceUserMfaTrustedDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceIdentifier")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("UserId", "DeviceIdentifier");

                    b.ToTable("MarbleFoodsUserMfaTrustedDeviceUserMfaTrustedDevice");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsWarehouse", b =>
                {
                    b.Property<Guid>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AvailableCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("TotalCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WarehouseId");

                    b.ToTable("MarbleFoodsWarehouse");
                });

            modelBuilder.Entity("MarbleFoodsCommodityMarbleFoodsQualityParameter", b =>
                {
                    b.Property<Guid>("CommoditiesCommodityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QualityParametersParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommoditiesCommodityId", "QualityParametersParameterId");

                    b.HasIndex("QualityParametersParameterId");

                    b.ToTable("MarbleFoodsCommodityMarbleFoodsQualityParameter");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsInventoryBatch", b =>
                {
                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsCommodity", "Commodity")
                        .WithMany("InventoryBatches")
                        .HasForeignKey("CommodityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsWarehouse", "Warehouse")
                        .WithMany("InventoryBatches")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commodity");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsInventoryTransaction", b =>
                {
                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsInventoryBatch", "Batch")
                        .WithMany("Transactions")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsUser", "CreatedByUser")
                        .WithMany("CreatedTransactions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsWarehouse", "DestinationWarehouse")
                        .WithMany("InboundTransactions")
                        .HasForeignKey("DestinationWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsWarehouse", "SourceWarehouse")
                        .WithMany("OutboundTransactions")
                        .HasForeignKey("SourceWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DestinationWarehouse");

                    b.Navigation("SourceWarehouse");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsPurchaseOrder", b =>
                {
                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsSupplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsPurchaseOrderItem", b =>
                {
                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsPurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsQualityCheck", b =>
                {
                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsInventoryBatch", "Batch")
                        .WithMany("QualityChecks")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsUser", "PerformedByUser")
                        .WithMany("QualityChecks")
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsQualityCheckResult", b =>
                {
                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsQualityCheck", "QualityCheck")
                        .WithMany("Results")
                        .HasForeignKey("QualityCheckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QualityCheck");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsUserMfaBackupCode", b =>
                {
                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsUser", "MarbleFoodsUser")
                        .WithMany()
                        .HasForeignKey("MarbleFoodsUserUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarbleFoodsUser");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsUserMfaTrustedDeviceUserMfaTrustedDevice", b =>
                {
                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsUser", "User")
                        .WithMany("TrustedDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarbleFoodsCommodityMarbleFoodsQualityParameter", b =>
                {
                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsCommodity", null)
                        .WithMany()
                        .HasForeignKey("CommoditiesCommodityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarbleFoods.Domain.Models.MarbleFoodsQualityParameter", null)
                        .WithMany()
                        .HasForeignKey("QualityParametersParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsCommodity", b =>
                {
                    b.Navigation("InventoryBatches");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsInventoryBatch", b =>
                {
                    b.Navigation("QualityChecks");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsPurchaseOrder", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsQualityCheck", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsSupplier", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsUser", b =>
                {
                    b.Navigation("CreatedTransactions");

                    b.Navigation("QualityChecks");

                    b.Navigation("TrustedDevices");
                });

            modelBuilder.Entity("MarbleFoods.Domain.Models.MarbleFoodsWarehouse", b =>
                {
                    b.Navigation("InboundTransactions");

                    b.Navigation("InventoryBatches");

                    b.Navigation("OutboundTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
